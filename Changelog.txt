### 0.4.8 ###

- Added the new "shift" option to the graph_ops SELCC and SELCLUST commands
to enable smoother iterative constucts in script.go files. This provides a 
shorthand way to keep all but the first clust or cc, (like range [1,-1], 
but without generating an error when called with only one clust or cc 
remaining.

- Added a new "sequence" option to the graph_ops SELCC command that allows
selecting one or more connected components based on the present of an exact
matching DNA subsequence (or its reverse compliment) 

- Added a feature in graph_ops allowing scaffolds to survive use of SELCLUST 
command with the "exclusive" option set to "true". Previously, rerunning 
the SCAFF command was necessary in this case.

- Fixed a bug in the graph_ops SCRIPT command option "tag" which prevented 
the tag value from propagating into recursive SCRIPT commands as intended.

- Fixed a bug in graph_ops that could cause crashes in the RELINK command 
when invoked with the "complete" option set to true. 

- Fixed bugs in graph_ops that caused corruption of STASHed graphs when an 
invalid range of values was provided to the SELCC or SELCLUST commands.

- Fixed a bug in the graph_ops CLUST command that caused tetracalc to fail 
when multiple commandline options were provided via the "options" parameter.

- Fixed a bug in the graph_ops FASTA command that could cause additional 
problems if filesystem errors were encountered in writing the output data.

- Fixed a bug in seq_scaffold that would cause an error at the end of writing
to stdout on some platforms.

- Fixed a bug in trimfastq that incorrectly counted mate-paired reads with
--only_mates.

- Upgraded included zlib to version 1.2.8

- Fixed a few typos in documentation and help strings.

### 0.4.7 ###

- Added the "tag" parameter to the graph_ops SCRIPT command, allowing for .go
script files to be more easily reused, by enabling them to write output files 
with different filenames and/or into different directory paths. 

- Fixed a bug in RDP_tree_dev.coffee that did not properly handle pre-existing
incertae_sedis nodes.

- Fixed a bug in RDP_go that may caused it to exit with an error if a vmem
limit was already set before running the script.

- nodejs version 0.10 or higher is now required to run graph_ops, seq_scaffold
and other SEAStAR tools requiring command-line Javascript support.

- Fixed a bug that occasionally produced truncated files when using gzip 
compressed output in graph_ops when run using nodejs version 0.10.x.

- Fixed assorted typos in help strings and documentation.

### 0.4.6 ###

- Fixed bugs in graph_ops that on rare occasions led to "stack overflow" errors 
and/or invalid JSON output files when using the DUMP command with very large
sequence graph datasets.

- Adjusted the "Garbage Collection" settings used with nodejs to improve 
performance and work around a rare case where memory fragmentation caused node
to allocate far more memory than required and become unstable.

### 0.4.5 ###

- Fixed a bug in ref_select that prevented proper sequence reconstruction when
reads were provided that lacked /1 or /2 suffixes on the read ids. This affects
Illumina reads and SOLiD reads prepared using solid2fastq with the -x option.

- Fixed issues in graph_ops which could cause poor performance or out of memory 
errors when loading or saving very large JSON files, even when there is plenty 
of memory available. With this change, it is recommended for performance reasons 
that SEAStAR be run with node.js version 0.10 or higher.

- Misc documentation fixes and enhancements

### 0.4.4 ###

- Added new options to trimfastq supporting the output of FASTA format files and 
adding more flexibility to the --mates_file output functionality. Also optimized
the case where -p = 0.0, to enable very efficient file format conversion using
--fasta and --mate_file when no additional trimming is desired.

- Fixed bug in fastq_nodup which led to corruption of the read headers in .single
output files for colorspace reads. 

- All *.awk scripts in the /bin directory now have correct shebang lines, so they
may be located and run through the PATH. 

- Added new script fastq_merge_csfasta.awk to pull modified csfasta read data back
into the originating fastq file. This is useful when using the SAET read error 
correction tool, which only supports csfasta format files.  

- Documentation fixes and updates reflecting the above changes.

### 0.4.3 ###
- General documentation improvements and fixed typos and formatting problems.

- Fixed a status printing bug in trimfastq

- Fixed bug in trimfastq Velvet paired interleaved output where wrong mate was reversed.

### 0.4.2 ###
- Documentation improvements; fixed typos and formatting problems when read on Github.

- Added the new "free" parameter to the graph_ops UNSTASH command.

- Fixed a segfault in ref_select when input SAM files contain no aligned reads.

- Fixed build problems in XCode projects.

- solid2fastq automatically checks for barcode strings of "default" or "Default".

### 0.4.1 ###
- Fixed typos and broken links in the documentation.

- Added this change log.

### 0.4.0 ###
- solid2fastq: Reversed the meaning of "read1" and "read2" file names for 
mate-pairs.  "read1" is the first read in a pair and "read2" is the second 
read, 5' to 3'.

- solid2fastq: Added support for new native SOLiD file read type "F5-RNA" and 
variations on "QV" placement in quality files.

- solid2fastq: Added -x parameter to turn of read ID suffix of "/1" and "/2".

- trimfastq:  Removed -c parameter.  This parameter toggled dinucleotide error 
probability calculation.  Now trimfastq automatically detects if a read set is 
colorspace or nucleotide and chooses the appropriate error probability 
calculation method.

- fastq_nodup: Fixed bug where index lengths of 32 would cause a segfault.

- fastq_nodup: Fixed bug where too many singlets were removed.

- Added new programs ref_select, tetracalc, graph_ops, and many other utility
scripts.  
