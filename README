Readme for the SEASTAR project

------------------------------

SEASTAR is released under the GPLv3 license, a copy of which is provided in
the file COPYING.

------------------------------

To build SEASTAR using Unix style command line tools, run the following commands
from the directory where where all files generated in the build process should be 
placed (including executables). This is your "destination tree". 

   cmake <dir> 
   make

Where <dir> is the path to the root of the SEASTAR source tree (where this README
file is found). 

If the path "." is used for <dir> above (run from the "source tree"), then the binary 
and source tree will be the same (an "in-source build"). After a successful make, 
executables will be found the directory <dir>/bin 

To test built components:

   make test

If any tests fail, do not use the built executables!

To clean all files generated in the source directory for an in-source build: 
(this will only work for git checked-out repositories)

   git clean -fxd

For an out-of-source build you can simply delete the destination tree directory and 
start again.

------------------------------

SEASTAR is designed to build and run on any 64-bit Unix-like system, including Linux
and Mac OS X (darwin) version 10.6 or later.

The SEASTAR package has dependencies on a small number of software packages that you 
(or your system administrator) may need to install or update. The process described 
in the next section will notify you if your system is missing any of these components.

Tool Dependencies:
 
- gcc (version 4.1 or newer, supporting OpenMP. See note below for OS X Lion systems)
- cmake (version 2.8 or newer)

For Apple OS X users: To fulfill these requirements, you will need to install Apple's 
XCode developer package (ver. 3 or newer), and then go to:
 
   http://www.macports.org/install.php 

Follow the instructions to install the macports package. 
Then run the following commands to install the required packages:

   sudo port selfupdate
   sudo port install cmake

------------------------------

A note about compilers on Mac OS X Lion (as of Xcode 4.2.1 and OS X 10.7.2):

There are known bugs in OpenMP (multi-core processor support) in the gcc compiler 
Apple supplies with Xcode on OS X Lion.

The cmake script provided checks OS X systems to see if the OpenMP support is working
correctly with the default (or specified) C compiler. If you receive an error when
trying build that says "You need to install gcc (version 4.4 or later) from MacPorts",
please follow these instructions:

1) Run the following commands:

   sudo port selfupdate 
   sudo port install gcc44

2) In your build directory, remove the cmake cache file: CMakeCache.txt

3) Now define environment variables to tell cmake which compiler to use.
Note that these commands must be run each time you start a command line session where 
you wish to run cmake again.
 
   export CC=/opt/local/bin/gcc-mp-4.4

4) Rebuild your project starting with the cmake command.

Note, it is possible to use a newer version of gcc (such as 4.6) if you already have
it installed for some other reason. However, all OS X testing of SEASTAR has been 
performed with gcc 4.4.

------------------------------

The following section covers using cmake to build XCode project files. However, we
do not recommend using executables built by XCode for anything other than development 
and debugging purposes due to the aforementioned bugs in the XCode compilers. This 
may change in the future, but as of now beware of these known issues with OpenMP in
XCode.

To make XCode project files (for Mac OS X only):

   cmake -G Xcode <dir> 

Where <dir> is the path to the root of the destination binary tree.
If the path '.' is used, then the binary and source tree will be the same 
(i.e. an in-source build).

WARNING!!! Once the XCode project is imported, the binary tree will not be
backed-up by Time Machine on OS X.  For in-source builds, the binary and 
source trees are the same, so there will be no source code backups if you
develop and build within the source tree.

Then load the project file into XCode to build, etc.

Alternatively, an xcode project may be built on the command line as:
   xcodebuild -alltargets -configuration [Debug|Release] 

------------------------------

